AWSTemplateFormatVersion: "2010-09-09"

Description: Service stack for recreation reservation manager service

Parameters:
  buildArtifactBucketName:
    Type: String
  buildArtifactObjectKey:
    Type: String
  configBucketArn: # TODO: remove
    Type: String
  env:
    Type: String

Resources:
  CheckReservationsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub 'rec-res-check-reservations-${env}'
      Runtime: python3.10
      Role: !GetAtt LambdaRole.Arn
      Handler: src/handler/check_requested_reservations.handler
      Timeout: 10
      MemorySize: 192
      Code:
        S3Bucket: !Ref buildArtifactBucketName
        S3Key: !Ref buildArtifactObjectKey
      Environment:
        Variables:
          CONFIG_BUCKET_NAME: !Ref ConfigBucket

  ApiAlertLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub 'rec-res-api-alert-${env}'
      Runtime: python3.10
      Role: !GetAtt LambdaRole.Arn
      Handler: src/handler/api/alert.handler
      Timeout: 10
      MemorySize: 512
      Code:
        S3Bucket: !Ref buildArtifactBucketName
        S3Key: !Ref buildArtifactObjectKey
      Environment:
        Variables:
          USER_CONFIG_BUCKET_NAME: !Ref UserConfigBucket
          API_COMMAND_QUEUE_URL: !Ref ApiCommandQueue

  CommandQueueLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub 'rec-res-process-command-queue-${env}'
      Runtime: python3.10
      Role: !GetAtt LambdaRole.Arn
      Handler: src/handler/api/alert.handler
      Timeout: 5
      MemorySize: 512
      Code:
        S3Bucket: !Ref buildArtifactBucketName
        S3Key: !Ref buildArtifactObjectKey
      Environment:
        Variables:
          USER_CONFIG_BUCKET_NAME: !Ref UserConfigBucket
          API_COMMAND_QUEUE_URL: !Ref ApiCommandQueue

  QueueEventSource:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 5
      EventSourceArn: !GetAtt ApiCommandQueue.Arn
      FunctionName: !Ref CommandQueueLambda
      MaximumBatchingWindowInSeconds: 0


  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub 'rec-res-lambda-role-${env}'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: !Sub 'rec-res-lambda-policy-${env}'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource:
                  - !GetAtt UserConfigBucket.Arn
                  - !Join
                    - ''
                    - - !GetAtt UserConfigBucket.Arn
                      - '/*'
                  - !Ref configBucketArn # TODO: remove
                  - !Join
                    - ''
                    - - !Ref configBucketArn
                      - '/*'
              -
                Effect: "Allow"
                Action:
                  - "sns:ListTopics"
                  - "sns:Publish"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: '*'
              -
                Effect: "Allow"
                Action:
                  - "sqs:SendMessage"
                  - "sqs:ReceiveMessage"
                Resource:
                  - !GetAtt ApiCommandQueue.Arn

  ApiGatewayRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub 'rec-res-api-gateway-role-${env}'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub 'rec-res-api-gateway-policy-${env}'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt ApiAlertLambda.Arn

  RecResApiV1ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'rec-res-api-${env}'
      ProtocolType: HTTP

  RecResApiV1Authorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref RecResApiV1ApiGateway
      AuthorizerType: JWT
      IdentitySource:
        - "$request.header.Authorization"
      JwtConfiguration:
        Audience:
          - "5bqrcgjpeej3u2vlgt3vg4ncu1"
        Issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/us-west-2_c11WeQkWB"
      Name: JwtAuthorizer

  RecResApiV1GetAlertsRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref RecResApiV1ApiGateway
      RouteKey: GET /alerts
      AuthorizationType: JWT
      AuthorizerId: !Ref RecResApiV1Authorizer
      Target: !Sub "integrations/${RecResApiV1GetAlertsIntegration}"

  RecResApiV1GetAlertRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref RecResApiV1ApiGateway
      RouteKey: GET /alerts/{alertId}
      AuthorizationType: JWT
      AuthorizerId: !Ref RecResApiV1Authorizer
      Target: !Sub "integrations/${RecResApiV1GetAlertsIntegration}"

  RecResApiV1PostAlertRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref RecResApiV1ApiGateway
      RouteKey: POST /alerts/{alertId}
      AuthorizationType: JWT
      AuthorizerId: !Ref RecResApiV1Authorizer
      Target: !Sub "integrations/${RecResApiV1GetAlertsIntegration}"

  RecResApiV1DeleteAlertRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref RecResApiV1ApiGateway
      RouteKey: DELETE /alerts/{alertId}
      AuthorizationType: JWT
      AuthorizerId: !Ref RecResApiV1Authorizer
      Target: !Sub "integrations/${RecResApiV1GetAlertsIntegration}"

  RecResApiV1AlertAlertRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref RecResApiV1ApiGateway
      RouteKey: PUT /alerts
      AuthorizationType: JWT
      AuthorizerId: !Ref RecResApiV1Authorizer
      Target: !Sub "integrations/${RecResApiV1GetAlertsIntegration}"

  RecResApiV1GetAlertsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RecResApiV1ApiGateway
      CredentialsArn: !GetAtt ApiGatewayRole.Arn
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt ApiAlertLambda.Arn
          - /invocations
      PayloadFormatVersion: 2.0
      RequestParameters:
        "overwrite:header.x-rec-res-user-id": "$context.authorizer.claims.sub"

  RecResApiV1Stage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      StageName: !Ref env
      Description: the main stage
      AutoDeploy: true
      ApiId: !Ref RecResApiV1ApiGateway

  ConfigBucket: # TODO: get this out of here
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - '-'
        - ['rec-res-manager-configuration', !Ref "env", !Ref "AWS::Region", !Ref "AWS::AccountId"]

  UserConfigBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - '-'
        - - 'rec-res-user-config'
          - !Ref env
          - !Ref "AWS::AccountId"

  ApiCommandQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Join
        - '-'
        - - 'rec-res-api-command'
          - !Ref env
      FifoQueue: true
      MessageRetentionPeriod: 3600
      VisibilityTimeout: 30

  CheckReservationsEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Sub 'check-reservations-event-rule-${env}'
      ScheduleExpression: "cron(* * * * ? *)"
      State: "DISABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "CheckReservationsLambda"
              - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref "CheckReservationsLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "CheckReservationsEventRule"
          - "Arn"
