AWSTemplateFormatVersion: "2010-09-09"

Description: Service stack for recreation reservation manager service

Parameters:
  buildArtifactBucketName:
    Type: String
  buildArtifactObjectKey:
    Type: String
  configBucketName:
    Type: String
  configBucketArn:
    Type: String

Resources:
  CheckReservationsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: rec-res-check-reservations
      Runtime: python3.9
      Role: !GetAtt LambdaRole.Arn
      Handler: src/handler/check_requested_reservations.handler
      Timeout: 10
      MemorySize: 192
      Code:
        S3Bucket: !Ref buildArtifactBucketName
        S3Key: !Ref buildArtifactObjectKey
      Environment:
        Variables:
          CONFIG_BUCKET_NAME: !Ref ConfigBucket

  ApiAlertLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: rec-res-api-alert
      Runtime: python3.9
      Role: !GetAtt LambdaRole.Arn
      Handler: src/handler/api/alert.handler
      Timeout: 10
      MemorySize: 512
      Code:
        S3Bucket: !Ref buildArtifactBucketName
        S3Key: !Ref buildArtifactObjectKey

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: rec-res-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: rec-res-lambda-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource:
                  - !Ref configBucketArn
                  - !Join
                    - ''
                    - [ !Ref configBucketArn, '/*' ]
              -
                Effect: "Allow"
                Action:
                  - "sns:ListTopics"
                  - "sns:Publish"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: '*'

  ConfigBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - '-'
        - ['rec-res-manager-configuration-bucket', !Ref "AWS::Region", !Ref "AWS::AccountId"]

  CheckReservationsEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: check-reservations-event-rule
      ScheduleExpression: "cron(* * * * ? *)"
      State: "DISABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "CheckReservationsLambda"
              - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref "CheckReservationsLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "CheckReservationsEventRule"
          - "Arn"
